\documentclass{article}
\usepackage[backend=bibtex, sorting=none]{biblatex}
\usepackage{hyperref}
\bibliography{references}
\begin{filecontents*}{references.bib}
@article{Tzelepis:2016ix,
author = {Tzelepis, Konstantinos and Koike-Yusa, Hiroko and De Braekeleer, Etienne and Li, Yilong and Metzakopian, Emmanouil and Dovey, Oliver M and Mupo, Annalisa and Grinkevich, Vera and Li, Meng and Mazan, Milena and Gozdecka, Malgorzata and Ohnishi, Shuhei and Cooper, Jonathan and Patel, Miten and McKerrell, Thomas and Chen, Bin and Domingues, Ana Filipa and Gallipoli, Paolo and Teichmann, Sarah and Ponstingl, Hannes and McDermott, Ultan and Saez-Rodriguez, Julio and Huntly, Brian J P and Iorio, Francesco and Pina, Cristina and Vassiliou, George S and Yusa, Kosuke},
title = {{A CRISPR Dropout Screen Identifies Genetic Vulnerabilities and Therapeutic Targets in Acute Myeloid Leukemia.}},
journal = {Cell reports},
year = {2016},
volume = {17},
number = {4},
pages = {1193--1205},
month = oct
}

@article{Iorio:2017,
author = {Iorio, Francesco and Behan, Fiona M and Goncalves, Emanuel and Beaver, Charlotte and Ansari, Rizwan  and Pooley, Rachel and Wilkinson, Piers and Harper, Sarah and Stronach, Euan and Saez-Rodriguez, Julio and Yusa, Kosuke and Garnett, Mathew J
},
title = {{Unsupervised correction of gene-independent cell responses to CRISPR-Cas9 targeting}},
journal = {revision},
volume = {0},
number = {0},
pages = {0--0},
month = Dec
}

@article{Li:2014kt,
author = {Li, Wei and Xu, Han and Xiao, Tengfei and Cong, Le and Love, Michael I and Zhang, Feng and Irizarry, Rafael A and Liu, Jun S and Brown, Myles and Liu, X Shirley},
title = {{MAGeCK enables robust identification of essential genes from genome-scale CRISPR/Cas9 knockout screens.}},
journal = {Genome Biology},
year = {2014},
volume = {15},
number = {12},
pages = {554}
}

@article{Hart:2016ja,
author = {Hart, Traver and Moffat, Jason},
title = {{BAGEL: a computational framework for identifying essential genes from pooled library screens.}},
journal = {BMC bioinformatics},
year = {2016},
volume = {17},
pages = {164},
month = apr
}

@article{Subramanian:2005wu,
author = {Subramanian, A and Tamayo, P and Mootha, VK and Mukherjee, S and Ebert, BL and Gillette, MA and Paulovich, A and Pomeroy, SL and Golub, TR and Lander, ES},
title = {{Gene set enrichment analysis: a knowledge-based approach for interpreting genome-wide expression profiles}},
journal = {Proceedings of the National Academy of Sciences of the United States of America},
year = {2005},
volume = {102},
number = {43},
pages = {15545}
}
\end{filecontents*}

\begin{document}
\title{CRISPRcleanR: An R package for unsupervised identification and correction of gene independent cell responses to CRISPR-cas9 targeting}
\author{Francesco Iorio, fi1@sanger.ac.uk}
\maketitle
\section{Quick start}

\subsection{Installation}

First, you need to install and load the devtools package. You can do this from CRAN. Invoke R and then type.

<<results='hide', eval=FALSE>>=
install.packages("devtools")
library(devtools)
@

Secondly, install the CRISPRcleanR with the following command:

<<results='hide', eval=FALSE>>=
install_github("francescojm/CRISPRcleanR")
@

\subsection{Raw sgRNA count median-ratio normalisation and computation of sgRNAs' log fold-changes}

Load the package.
<<results='hide',echo=FALSE>>=
    options(warn = -1)
@

<<results='hide'>>=
    library(CRISPRcleanR)
@

<<results='hide',echo=FALSE>>=
    options(warn = 0)
@

\textbf{Step 1:} Load your sgRNA library annotation. In this example we will use a built in data frame containing the annotation of the SANGER v1.0 library \cite{Tzelepis:2016ix}:
<<>>=
data(KY_Library_v1.0)
@

To use your own library annotation you will have to put it in a data frame with the same format of the \texttt{KY\char`_Library\char`_v1.0} data frame (detailed in the corresponding entry of the reference manual of the CRISPRcleanR package).\\

\textbf{Step 2:} Store the path of the tsv file containing your sgRNAs' raw counts in a temporare variable. In this example we will use counts generated upon a CRISPR-Cas9 pooled drop-out screen (described in \cite{Iorio:2017}) built in this package.
<<>>=
fn<-paste(system.file('extdata',package = 'CRISPRcleanR'),
          '/HT-29_counts.tsv',sep='')
@ 
The tsv with the sgRNAs' raw counts must be formatted as specified in the reference manual entry for function \texttt{ccr.NormfoldChanges}.\\

\textbf{Step 3:} Performing median-ratio normalisation of raw counts and computing sgRNAs' log fold-changes.
In this example we will exclude sgRNAs with less than 30 reads in the plasmid sample.

<<Norm_and_fc, fig.width=10, fig.height=5>>=
normANDfcs<-ccr.NormfoldChanges(fn,
                                min_reads=30,
                                EXPname='HT-29',
                                libraryAnnotation=KY_Library_v1.0)
@ 
This function returns a list of two data frames, respectively with normalised counts and log fold-changes, and it saves the as Robject in the directory whose path is specified with the parameter \texttt{outdir} (set to \texttt{'./'} by default).

<<size='small'>>=
head(normANDfcs$norm_counts)
head(normANDfcs$logFCs)
@ 

\textbf{IMPORTANT:} if there are control replicates in your sgRNAs count file their number must be specified by in the parameter \texttt{ncontrols} (equal to 1 by default) of the \texttt{ccr.NormfoldChanges} function.

\subsection{Genome sorting of sgRNAs' log fold-changes and their correction for gene independent responses to CRISPR-Cas9 targeting}

\textbf{Step 1:} Map genome-wide sgRNAs' log fold changes (averaged across replicates) on the genome, sorted according to their positions of the targeted region on the chromosomes.

<<>>=
gwSortedFCs<-
    ccr.logFCs2chromPos(normANDfcs$logFCs,KY_Library_v1.0)
@ 

<<size='small'>>=
head(gwSortedFCs)
@

\textbf{Step 2:} Identify and correct biased sgRNAs' log fold-changes putatively due to gene independent responses to CRISPR-Cas9 targeting (this function calls iteratively the \texttt{ccr.cleanChrm} function,
which performs the correction in each chromosome individually). In this example we are using a completely unsuerpvised approach and correcting chromosomal segments of equal sgRNA log fold-changes if they include sgRNAs targeting at least 3 different genes, and without making any assumption on gene essentiality nor knowing \textit{a priori} the copy number status of the included genes \cite{Iorio:2017}.

<<correction,fig.show='hide',  results='hide'>>=
correctedFCs<-ccr.GWclean(gwSortedFCs,display=TRUE,label='HT-29')
@
The corrected sgRNAs fold-changes are returned in a list (as a data frame), together with another data frame
with annotation of the identified segments and a vector of strings containing all the sgRNAs identifier genome-sorted.

<<size='small'>>=
    head(correctedFCs$corrected_logFCs)
@

Details on how the data frame with the corrected sgRNAs fold-changes should be interpreted can be found in the
entry of the \texttt{ccr.GWclean} function in the package reference manual.\\

This function also produces one plot per chromosome, with segments of sgRNAs' equal log fold-changes before and after the correction. An example of these plot is reported below (chromosome 8, in HT-29 with the region containing \textit{MYC} highly biased toward consistent negative fold-changes)

<<correction_chrm8, echo=FALSE, results='hide',fig.height=8,fig.width=6>>=
tmp<-ccr.cleanChrm(gwSortedFCs,8,display=TRUE,label='HT-29',
                        min.ngenes=3)
@

\subsection{Correcting sgRNAs' treatment counts for mean-variance modeling}
In order to apply the inverse transformation described in \cite{Iorio:2017}, thus to derive corrected normalised sgRNAs' treatment counts from corrected log fold-changes, it is sufficient to run the function \texttt{ccr.correctCounts} as follows:

<<results='hide'>>=
correctedCounts<-ccr.correctCounts('HT-29',
                                   normANDfcs$norm_counts,
                                   correctedFCs,
                                   KY_Library_v1.0,
                                   minTargetedGenes=3,
                                   OutDir='./')
@

With the plasmid counts, are suitable for mean-variance modeling approach (such that implemented in MAGeCK\cite{Li:2014kt}). 

<<>>=
head(correctedCounts)
@

This function also saves the correctedCounts as Rdata object at the location specified by the parameter \texttt{OutDir}.
To run MAGeCK, using these corrected sgRNAs' counts you will need to save them as a tsv file first:

<<>>=
write.table(correctedCounts,
            quote=FALSE,
            row.names = FALSE,
            sep='\t',
            file='./HT-29_mgk_input_corrected.tsv')
@

then use this file as input for MAGeCK.\\

\textbf{IMPORTANT:} the corrected sgRNAs' count are already median-normalised
therefore, when executing MAGeCK, the parameter \texttt{--norm-method} should be set to \texttt{none}.

\section{Visualisation and assessment of Results}

\subsection{Classification performances of reference sets of genes (or sgRNAs) based on depletion log fold-changes}

To perform a basic quality control assessment of your data it is possible to test the genome-wide profile of sgRNAs' depletion logFCs (or gene depletion logFCs averaged across targeting sgRNAs)
as a classifier of reference sets of core-fitness essential (CFE) and non-essential genes.
What you need for this is a named vector of sgRNAs (or gene) log fold changes and two reference gene sets. In this example we make use of a precomputed essentiality profile from the builtin data object \texttt{EPLC.272HcorrectedFCs}. This is a list containing corrected sgRNAs log fold-changes and segment annotations for an example cell line (EPLC-272H), obtained using the \texttt{ccr.GWclean} function, as detailed in its reference manual entry. However the data frame containing the corrected log fold-changes, included in this list, reports also the original sgRNAs logFC (column \texttt{avgFC} which will be used in this example).

<<>>=
data(EPLC.272HcorrectedFCs)
@

<<size='small'>>=
head(EPLC.272HcorrectedFCs$corrected_logFCs)
@

As reference gene sets we will lists of CFE and non-essential genes assembled from multiple RNAi studies used as classification template by the BAGEL algorithm to call gene depletion significance \cite{Hart:2016ja}, included in the builtin data objects \texttt{BAGEL\char`_essential} and \texttt{BAGEL\char`_nonEssential}.

<<>>=
data(BAGEL_essential)
data(BAGEL_nonEssential)

head(BAGEL_essential)
head(BAGEL_nonEssential)
@

Finally, we will need the sgRNAs library annotation. In this case we will use the builtin object \texttt{KY\char`_KY\char`_Library\char`_v1.0} (introduced in the previous section) \cite{Tzelepis:2016ix}. To use a different library annotation you will have to put it in a data frame with the same format of the \texttt{KY\char`_Library\char`_v1.0} data frame (detailed in the corresponding entry of the reference manual of the CRISPRcleanR package).\\

<<>>=
data(KY_Library_v1.0)
@

We will start with an evualuation at the sgRNA level. As mentioned, the log fold-changes needs to be stored a named vector:

<<>>=
FCs<-EPLC.272HcorrectedFCs$corrected_logFCs$avgFC
names(FCs)<-rownames(EPLC.272HcorrectedFCs$corrected_logFCs)
@

To convert the reference CFE and non-essential gene sets into sets of sgRNAs, the function \texttt{ccr.genes2sgRNAs} can be used, as follows:

<<results='hide',echo=FALSE>>=
    options(warn = -1)
@

<<>>=
BAGEL_essential_sgRNAs<-
    ccr.genes2sgRNAs(KY_Library_v1.0,BAGEL_essential)
BAGEL_nonEssential_sgRNAs<-
    ccr.genes2sgRNAs(KY_Library_v1.0,BAGEL_nonEssential)
@

<<results='hide',echo=FALSE>>=
    options(warn = 0)
@

Following these calls, possible warning messages could appear informing you that some of the reference genes are not targeted by any sgRNA in the considered library. This has no impact on the following steps and results.\\

Finally, to visualise the precision-recall curve quantifying the performances in classifying the considered reference sets it is sufficient to call: 
<<fig.width=5, fig.height=5>>=
ccr.PrecisionRecallCurve(FCs,BAGEL_essential_sgRNAs,
                             BAGEL_nonEssential_sgRNAs)
@

To reperform the analysis at the gene level, first we should convert the profile of sgRNA log fold change into gene level summaries. The function \texttt{ccr.geneMeanFCs} performs this conversion by considering for each gene the average logFC across targeting guides.

<<>>=
geneFCs<-ccr.geneMeanFCs(FCs,KY_Library_v1.0)
head(geneFCs)
@

The following call reperform the analysis at the gene level and it also computes and shows Recall values
at a fixed False Discovery Rate (in this case equal to 5\%).

<<fig.width=5, fig.height=5>>=
ccr.PrecisionRecallCurve(geneFCs,
                         BAGEL_essential,
                         BAGEL_nonEssential,
                         FDRth = 0.05)
@

As can be seen above, when setting the parameter \texttt{FRDth} to a value different from \texttt{NULL}
(its default value), this function also return the log fold change threshold at which a classification FDR equal to the inputted value is achieved. 

\subsection{Depletion profile visualisation with genes signatures superimposed and recall computation}
For another quick assessment of your data it is possible to visually inspect enrichments of predefined sets of core-fitness essential genes at the top of the genome wide essentiality profiles (ranked based on depletion logFC in increasing order), and to compute their classification recall at a fixed FDR (determined as deatiled in the previous subsection).\\

To this aim, in this example we will load additional sets of CFE genes assembled from MsigDB \cite{Subramanian:2005wu} as detailed in \cite{Iorio:2017}, and we will assemble them into a named list, as follows:

<<>>=
data(EssGenes.ribosomalProteins)
data(EssGenes.DNA_REPLICATION_cons)
data(EssGenes.KEGG_rna_polymerase)
data(EssGenes.PROTEASOME_cons)
data(EssGenes.SPLICEOSOME_cons)

## Assembling a named list with all the considered gene sets
SIGNATURES<-list(Ribosomal_Proteins=EssGenes.ribosomalProteins,
                 DNA_Replication = EssGenes.DNA_REPLICATION_cons,
                 RNA_polymerase = EssGenes.KEGG_rna_polymerase,
                 Proteasome = EssGenes.PROTEASOME_cons,
                 Spliceosome = EssGenes.SPLICEOSOME_cons,
                 CFE = BAGEL_essential,
                 non_essential = BAGEL_nonEssential)
@

Finally we will create a visualisation of the gene essentiality profile with superimposed these signatures, as follows:

<<fig.width=7, fig.height=7,fig.align='center'>>=
Recall_scores<-ccr.VisDepAndSig(FCsprofile = geneFCs,
                            SIGNATURES = SIGNATURES,
                            TITLE = 'EPLC-272H',
                            pIs = 6,
                            nIs = 7)
@

\textbf{IMPORTANT:} When calling \texttt{ccr.VisDepAndSig} it is important to correctly specify the index position of the reference gene sets that are used as classification template to derive the FDR threshold, within the list of signatures. In this case the template sets are \texttt{BAGEL\char`_essential} and \texttt{BAGEL\char`_nonEssential}, which in the \texttt{SIGNATURE} list are in position 6 and 7, respectively (this must be specified in the \texttt{pIs} and \texttt{nIs} parameters of the \texttt{ccr.VisDepAndSig} function).\\

This function also returns recall values at 5\% FDR for all the inputted signatures.

<<>>=
Recall_scores
@

\subsection{CRISPRcleanR correction assessment: Statistical tests}
To evaluate the effect of the CRISPRcleanR correction on your data it is possible to inspect the logFCs changes of sgRNAs targeting different sets of genes for statistically significant differences with respect to background pre/post CRISPRcleanR correction.\\

To this aim, in this example we will use the builtin data object\\ \texttt{HT.29correctedFCs} containing corrected sgRNAs logFCs and segment annotations for an example cell line (HT-29), obtained using the \texttt{ccr.GWclean} function, as detailed in its reference manual entry.

<<>>=
data(HT.29correctedFCs)
@

The function \texttt{ccr.perf\char`_statTests} performs this analysis, saving pdf figures in a user defined location ('./' by default).\\

Particularly, this functions assess the statistical difference pre/post CRISPRcleanR correction of log fold changes for sgRNAs targeting respectively:

\begin{itemize}
        \item copy number (CN) deleted genes according to the GDSC1000 repository
        \item CN deleted genes (gistic score = -2) according to the CCLE repository
        \item non expressed genes (FPKM lower than 0.05)
        \item genes with gistic score = 1
        \item genes with gistic score = 2
        \item non espressed genes (FPKM lower than 0.05) with gistic score = 1
        \item non espressed genes (FPKM lower than 0.05) with gistic score = 2
        \item genes with minimal CN = 2, according to the GDSC1000
        \item genes with minimal CN = 4, according to the GDSC1000
        \item genes with minimal CN = 8, according to the GDSC1000
        \item genes with minimal CN = 10, according to the GDSC1000
        \item non expressed genes (FPKM lower than 0.05) with minimal CN = 2, according to the GDSC1000
        \item non expressed genes (FPKM lower than 0.05) with minimal CN = 4, according to the GDSC1000
        \item non expressed genes (FPKM lower than 0.05) with minimal CN = 8, according to the GDSC1000
        \item non expressed genes (FPKM lower than 0.05) with minimal CN = 10, according to the GDSC1000
        
        \end{itemize}

It should be called as follows:

<<eval=FALSE>>=
RES<-ccr.perf_statTests('HT-29',libraryAnnotation = KY_Library_v1.0,
                   correctedFCs = HT.29correctedFCs$corrected_logFCs,
                   GDSC.geneLevCNA = NULL,
                   CCLE.gisticCNA = NULL,
                   RNAseq.fpkms = NULL)
@

It will save the following figure in the indicated path. 
\begin{figure}[!h]
\centering
\includegraphics[width=130mm]{HT-29_bp.pdf}
\end{figure}

Leaving the parameters \texttt{GDSC.geneLevCNA}, \texttt{CCLE.gisticCNA}, and\\ \texttt{RNAseq.fpkms} to their default NULL value will force this function to use the respective builtin data object containing data only for 15 cell lines used in \cite{Iorio:2017} and in this package documentation to assess the performances of CRISPRcleanR.\\

\textbf{IMPORTANT:} To analyse data from screening a different cell line ad-hoc \texttt{GDSC.geneLevCNA}, \texttt{CCLE.gisticCNA}, and \texttt{RNAseq.fpkms} data object should be assembled (with the same format of the respective builtin data objects, detailaed in their user reference manual entries, which contain also additional infos on how to derive data for 1,000 human cance cell lines).\\

Comprehensive statistical scores (detailed in the user reference manual) resulting from the executio of this function are also returned in output.\\

Another example, analysing in the same way the essentiality profile of the EPLC-272H cell line is reported below.

<<>>=
RES<-ccr.perf_statTests('EPLC-272H',libraryAnnotation = KY_Library_v1.0,
                   correctedFCs = EPLC.272HcorrectedFCs$corrected_logFCs)
@

<<size='small'>>=
RES$PVALS
RES$EFFsizes
@

\begin{figure}[!h]
\centering
\includegraphics[width=130mm]{EPLC-272H_bp.pdf}
\end{figure}

\newpage
To inspect the variation induced by the CRISPRcleanR correction on distribution densities of sgRNA log fold changes for defined sets of targeted genes prior/post CRISPRcleanR correction, the following function can be also used:

<<>>=
ccr.perf_distributions('HT-29',HT.29correctedFCs$corrected_logFCs,
                       libraryAnnotation = KY_Library_v1.0)
@

\textbf{IMPORTANT:} The instructions provided regarding what CN/transcriptional data object to pass to the \texttt{ccr.perf\char`_statTests} apply also to this function.\\

Additional infos on how to use this function can be found in the user reference manual.

\subsection{Recall variations following CRISPRcleanR correction for reference, copy number amplified, and non expressed genes}

A final analysis that can be done with the CRISPRcleanR package in order to evalute the effect of its correction on the classfication recall of predefined gene sets can be performed with the following call, which can perform the analysis at the sgRNA level:

<<>>=
ccr.RecallCurves('EPLC-272H',EPLC.272HcorrectedFCs$corrected_logFCs,
                  libraryAnnotation=KY_Library_v1.0)
@

as well as the gene level:

<<>>=
ccr.RecallCurves('EPLC-272H',EPLC.272HcorrectedFCs$corrected_logFCs,
                  libraryAnnotation=KY_Library_v1.0,GeneLev = TRUE)
@

\textbf{IMPORTANT:} The instructions provided regarding what CN/transcriptional data object to pass to the \texttt{ccr.perf\char`_statTests} apply also to this function.\\

Additional infos on how to use this function can be found in the user reference manual.


\printbibliography

\end{document}